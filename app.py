import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf
import os
import json
from datetime import datetime
from sklearn.preprocessing import MinMaxScaler
from src.data_processing.loader import get_sp500_tickers, choose_random_ticker, download_stock_data
from src.data_processing.preprocessor import DataPreprocessor
from src.modeling.model import WildregressModel
from src.modeling.blocks import Blocks
from src.modeling.evolution import evolve_population
from src.modeling.inference_utils import load_saved_model, predict_with_model, evaluate_predictions
import warnings
import joblib
warnings.filterwarnings("ignore")


def create_sequences(X, y, window):
    X_seq, y_seq = [], []
    for i in range(window, len(X)):
        X_seq.append(X[i-window:i])
        y_seq.append(y[i])
    return np.array(X_seq), np.array(y_seq)


st.set_page_config(page_title="üß† NeuroTrade Evolution", layout="wide")
st.title("üìà NeuroTrade Analytics")

tab_train, tab_infer = st.tabs(["üß¨ –û–±—É—á–µ–Ω–∏–µ –∏ —ç–≤–æ–ª—é—Ü–∏—è", "üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏"])

# TAB 1: –û–±—É—á–µ–Ω–∏–µ –∏ —ç–≤–æ–ª—é—Ü–∏—è
with tab_train:
    with st.expander("‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"):
        st.markdown("""
        **üìå –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (`window`)**  
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—Ä–æ–≥–Ω–æ–∑–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è.

        **üß¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π (`generations`)**  
        –°–∫–æ–ª—å–∫–æ —Ä–∞—É–Ω–¥–æ–≤ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –¥–ª—è —ç–≤–æ–ª—é—Ü–∏–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä.

        **üë• –†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏ (`population`)**  
        –°–∫–æ–ª—å–∫–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä –±—É–¥–µ—Ç —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

        **üìö –≠–ø–æ—Ö–∏ (`epochs`)**  
        –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±—É—á–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö.
        """)

    tickers = get_sp500_tickers()
    ticker = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä –∏–∑ S&P 500", ["(—Å–ª—É—á–∞–π–Ω—ã–π)"] + tickers)
    window = st.slider("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", 10, 100, 60, step=5)
    generations = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫–æ–ª–µ–Ω–∏–π", 1, 10, 2)
    population = st.slider("–†–∞–∑–º–µ—Ä –ø–æ–ø—É–ª—è—Ü–∏–∏", 2, 10, 4)
    epochs = st.slider("–≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏", 1, 50, 15)

    save_model = st.checkbox("üíæ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –º–æ–¥–µ–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", value=True)
    start_button = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—É—á–µ–Ω–∏–µ")

    if start_button:
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ..."):
            selected_ticker = choose_random_ticker(tickers) if ticker == "(—Å–ª—É—á–∞–π–Ω—ã–π)" else ticker
            df = download_stock_data(selected_ticker, start='2018-01-01')
            df = DataPreprocessor.clean_dataset(df)
            df = DataPreprocessor.add_all_indicators(df, windows=[5, 10], indicators=['Close'])

            features = df.drop(columns=['Close'])
            target = df[['Close']]
            split_index = int(len(df) * 0.8)
            features_train, features_val = features[:split_index], features[split_index:]
            target_train, target_val = target[:split_index], target[split_index:]

            scaler_x = MinMaxScaler()
            scaler_y = MinMaxScaler()
            X_train_scaled = scaler_x.fit_transform(features_train)
            X_val_scaled = scaler_x.transform(features_val)
            y_train_scaled = scaler_y.fit_transform(target_train)
            y_val_scaled = scaler_y.transform(target_val)

            X_train, y_train = create_sequences(X_train_scaled, y_train_scaled, window)
            X_val, y_val = create_sequences(X_val_scaled, y_val_scaled, window)
            input_shape = X_train.shape[1:]

        with st.spinner("üß¨ –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–π—Ä–æ—ç–≤–æ–ª—é—Ü–∏—é..."):
            blocks = Blocks()
            best_bot_pop, best_bot, best_setblockov = evolve_population(
                X_train, y_train, X_val, y_val, scaler_y,
                population_size=population,
                generations=generations,
                input_shape=input_shape,
                verbose=True
            )

        with st.spinner("üß† –§–∏–Ω–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏..."):
            builder = WildregressModel(input_shape=input_shape)
            model = builder(best_bot_pop, best_bot, best_setblockov, blocks)
            model.compile(optimizer='adam', loss='mse')
            model.fit(X_train, y_train,
                      validation_data=(X_val, y_val),
                      epochs=epochs,
                      batch_size=32,
                      verbose=0)

        with st.spinner("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑..."):
            y_pred = model.predict(X_val).reshape(-1, 1)
            y_val = y_val.reshape(-1, 1)
            y_pred_rescaled = scaler_y.inverse_transform(y_pred)
            y_val_rescaled = scaler_y.inverse_transform(y_val)

            st.subheader(f"üìâ –ò—Å—Ç–∏–Ω–∞ vs –ü—Ä–æ–≥–Ω–æ–∑ –¥–ª—è {selected_ticker}")
            fig, ax = plt.subplots(figsize=(12, 4))
            ax.plot(y_val_rescaled, label='–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', linewidth=2)
            ax.plot(y_pred_rescaled, label='–ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏', linestyle='--')
            ax.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥")
            ax.set_ylabel("–¶–µ–Ω–∞")
            ax.legend()
            ax.grid(True)
            st.pyplot(fig)

        if save_model:
            st.subheader("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            model_name = f"model_{selected_ticker}_{timestamp}"
            save_path = f"models/{model_name}"
            os.makedirs(save_path, exist_ok=True)

            model.save(f"{save_path}/model.h5")
            joblib.dump(scaler_y, f"{save_path}/scaler_y.pkl")
            metadata = {
                "ticker": selected_ticker,
                "window": window,
                "generations": generations,
                "population": population,
                "epochs": epochs,
                "bot_pop": best_bot_pop,
                "bot": best_bot,
                "setblockov": best_setblockov
            }
            with open(f"{save_path}/metadata.json", "w") as f:
                json.dump(metadata, f, indent=2)
            st.success(f"‚úÖ –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {save_path}/")
            st.json(metadata)

# TAB 2: –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
with tab_infer:
    st.subheader("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞–Ω–µ–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")

    model_dirs = [f.path for f in os.scandir("models") if f.is_dir()]
    if not model_dirs:
        st.warning("‚ùó –í –ø–∞–ø–∫–µ models –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
    else:
        selected_model_dir = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏", model_dirs)
        load_button = st.button("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å")

        if load_button:
            with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å..."):
                model, metadata, scaler_y = load_saved_model(selected_model_dir)
                st.json(metadata)

                df = download_stock_data(metadata["ticker"], start='2018-01-01')
                df = DataPreprocessor.clean_dataset(df)
                df = DataPreprocessor.add_all_indicators(df, windows=[5, 10], indicators=['Close'])

                features = df.drop(columns=['Close'])
                target = df[['Close']]
                split_index = int(len(df) * 0.8)
                features_train, features_val = features[:split_index], features[split_index:]
                target_train, target_val = target[:split_index], target[split_index:]

                scaler_x = MinMaxScaler()
                scaler_y = MinMaxScaler()
                X_val_scaled = scaler_x.fit_transform(features_val)
                y_val_scaled = scaler_y.fit_transform(target_val)

                window = metadata["window"]
                X_val, y_val = create_sequences(X_val_scaled, y_val_scaled, window)


                y_pred_rescaled = predict_with_model(model, X_val, scaler_y)
                y_val_rescaled = scaler_y.inverse_transform(y_val)

                st.subheader("üìà –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                fig2, ax2 = plt.subplots(figsize=(12, 4))
                ax2.plot(y_val_rescaled, label='–ò—Å—Ç–∏–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', linewidth=2)
                ax2.plot(y_pred_rescaled, label='–ü—Ä–æ–≥–Ω–æ–∑', linestyle='--')
                ax2.set_xlabel("–í—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥")
                ax2.set_ylabel("–¶–µ–Ω–∞")
                ax2.legend()
                ax2.grid(True)
                st.pyplot(fig2)

                st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
                metrics = evaluate_predictions(y_val_rescaled, y_pred_rescaled)
                st.json(metrics)
